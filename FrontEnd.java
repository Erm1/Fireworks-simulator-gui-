/*
Ermiyas Liyeh
30711570
Lab Section - MW 2:00PM to 3:15PM 
I did not collaborate with anyone on this assignment.
*/

//imported different libraries for the proper functioning of the code I wrote
import java.awt.*;
import java.awt.event.*;
import javax.swing.*;
import javax.swing.event.*;

//created a class called FrontEnd that extends JFrame
public class FrontEnd extends JFrame{
	/**
	 * 
	 */
	private static final long serialVersionUID = 1L; //serialization generated by java 
	
	//down below, I created a JButton, JLabel, JPanel, JSlider and JSpinner 
	//variables that are going to be used latter in the code
	protected JButton button1; 
	protected JLabel label1, label2, label3, label4, label5, label6;
	protected JPanel panel1, panel2;
	protected JSlider slider1, slider2, slider3, slider4, slider5, slider6;
	protected JSpinner spinnerModel;
	
	//I also created a GridBagConstraints "c", and I initialized integer and string variables to be used later
	protected GridBagConstraints c;
	protected int initVelo = 0, initAngle = 0, levelExplo = 0, timeDelay = 0;
	protected String colorTraj = "";
	
	
	//FrontEnd() is the constructor where almost everything happens 
	public FrontEnd() {
		//by calling the supper class, I am able to set a title and set a tDefaultCloseOperation
		super("Project 3");
		setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
		
		//Created a panel to add all the components of my class at the north end of my canvas(JFrame) 
		panel1 = new JPanel(new GridBagLayout());
		add(BorderLayout.NORTH, panel1);
		
		//Created a panel to display the resulting fireworks obtained by using the user retrieved information
		//and I added it to the center of my canvas
		panel2 = new JPanel(new GridBagLayout());
		add(BorderLayout.CENTER, panel2);

		//created an instance of GridBagConstraints called "c" to 
		//use it arrange my components on the north side of the frame
		c = new GridBagConstraints();
		
		//created a JLabel object instance called label1 and I set the text for it
		//I assigned it a c.gridx and c.gridy to determine where to print it on the canvas
		//and finally the component is added to the panel1
		label1 = new JLabel("Choose projectile speed [m/s]: ");
		c.gridx = 0;
		c.gridy = 0;
		c.insets = new Insets(5, 5, 5, 5);
		panel1.add(label1, c);
		
		//created a JLabel object instance called label2 and I set the text for it
		//I assigned it a c.gridx and c.gridy to determine where to print it on the canvas
		//and finally the component is added to the panel1
		label2 = new JLabel("Choose projectile angle: ");
		c.gridx = 2;
		c.gridy = 0;
		c.insets = new Insets(5, 5, 5, 5);
		panel1.add(label2, c);
		
		//created a JLabel object instance called label3 and I set the text for it
		//I assigned it a c.gridx and c.gridy to determine where to print it on the canvas
		//and finally the component is added to the panel1
		label3 = new JLabel("Select the level of firework explosion: ");
		c.gridx = 4;
		c.gridy = 0;
		c.insets = new Insets(5, 5, 5, 5);
		panel1.add(label3, c);
		
		//created a JLabel object instance called label4 and I set the text for it
		//I assigned it a c.gridx and c.gridy to determine where to print it on the canvas
		//and finally the component is added to the panel1
		label4 = new JLabel("Choose color for trajectory of fireworks: ");
		c.gridx = 6;
		c.gridy = 0;
		c.insets = new Insets(5, 5, 5, 5);
		panel1.add(label4, c);

		//created a JLabel object instance called label1 and I set the text for it
		//I assigned it a c.gridx and c.gridy to determine where to print it on the canvas
		//and finally the component is added to the panel1
		label6 = new JLabel("Choose time delay: ");
		c.gridx = 8;
		c.gridy = 0;
		c.insets = new Insets(5, 5, 5, 5);
		panel1.add(label6, c);
		
		//created a JSlider object instance called slider1 and 
		//I set it to be horizontally displayed with initial, default and final values and 
		//I assigned all other important informations including ChangeListeners(to retrieve user inputs/data)
		//I assigned it a c.gridx and c.gridy to determine where to print it on the canvas
		//and finally the component is added to the panel1
		slider1 = new JSlider(JSlider.HORIZONTAL, 50, 150, 100);
		slider1.setMajorTickSpacing(20);
		slider1.setMinorTickSpacing(5);
		slider1.setPaintTicks(true);
	    slider1.setPaintLabels(true);
		slider1.addChangeListener(new ChangeListener() {
					@Override
					public void stateChanged(ChangeEvent e) {
						initVelo = slider1.getValue();
					}
				});
		c.gridx = 0;
		c.gridy = 1;
		c.insets = new Insets(5, 5, 5, 5);
		panel1.add(slider1, c);
		
		//created a JSlider object instance called slider2 and 
		//I set it to be horizontally displayed with initial, default and final values and 
		//I assigned all other important informations including ChangeListeners(to retrieve user inputs/data)
		//I assigned it a c.gridx and c.gridy to determine where to print it on the canvas
		//and finally the component is added to the panel1
		slider2 = new JSlider(JSlider.HORIZONTAL, 15, 80, 45);
		slider2.setMajorTickSpacing(15);
		slider2.setMinorTickSpacing(5);
		slider2.setPaintTicks(true);
		slider2.setPaintLabels(true);
		slider2.addChangeListener(new ChangeListener() {
					@Override
					public void stateChanged(ChangeEvent e) {
						initAngle = slider2.getValue();
					}
				});
		c.gridx = 2;
		c.gridy = 1;
		c.insets = new Insets(5, 5, 5, 5);
		panel1.add(slider2, c);
		
		//created a SpinnerNumberModel object instance called spinner and to make "spinnerModel = new JSpinner(spinner)"
		//I set it to display initial, default and final values and spinner step values 
		//I assigned all other important informations including ChangeListeners(to retrieve user inputs/data)
		//I assigned it a c.gridx and c.gridy to determine where to print it on the canvas
		//and finally the component is added to the panel1
		SpinnerNumberModel spinner = new SpinnerNumberModel(1,1,5,1);
		spinnerModel = new JSpinner(spinner);
		spinnerModel.addChangeListener(new ChangeListener() {
					@Override
					public void stateChanged(ChangeEvent e) {
						levelExplo = (Integer) spinner.getValue();
					}
				});
		c.gridx = 4;
		c.gridy = 1;
		c.insets = new Insets(5, 5, 5, 5);
		panel1.add(spinnerModel, c);
		
		//here, I created a string array trajectoryColor and used it to make elements of my 
		//JComboBox which is casted to integer. when the user chooses a certain element,
		//I added a code to return equivalent color for the string casted color name.
		//and finally the component is added to the panel1
		String[] trajectoryColor = {"red","yellow","green","gray","pink"};
		JComboBox<String> trajectoryBox = new JComboBox<String>(trajectoryColor);
		c.gridx = 6;
		c.gridy = 1;
		c.insets = new Insets(5, 5, 5, 5);
		panel1.add(trajectoryBox, c);
		
		//created a JSlider object instance called slider6 and 
		//I set it to be horizontally displayed with initial, default and final values and 
		//I assigned all other important informations including ChangeListeners(to retrieve user inputs/data)
		//I assigned it a c.gridx and c.gridy to determine where to print it on the canvas
		//and finally the component is added to the panel1
		slider6 = new JSlider(JSlider.HORIZONTAL, 0, 20, 9);
		slider6.setMajorTickSpacing(5);
		slider6.setMinorTickSpacing(1);
		slider6.setPaintTicks(true);
		slider6.setPaintLabels(true);
		slider6.addChangeListener(new ChangeListener() {
					@Override
					public void stateChanged(ChangeEvent e) {
						timeDelay = slider6.getValue();
					}
				});
		c.gridx = 8;
		c.gridy = 1;
		c.insets = new Insets(5, 5, 5, 5);
		panel1.add(slider6, c);
		
		//Here, in this piece of code, I made an instance of action ActionListener object and 
		//called the repaint method which will clean the previous drawing from the canvas, when the launch
		//button is pressed. and outputs(draws) a new one using user information
		ActionListener clk = new ActionListener() {
            public void actionPerformed(final ActionEvent e) {
                repaint();
            }

        };
		
        //I added "clk" to my button's action listener.
        //in my button's ActionListener, I created a new action listener, that performs the drawing using the data 
        //from user input as the user clicks on the "Launch" button
        //the launch button is added to the north panel, where as the action performed is printed to the central panel
		//I have created an inner class to achieve all the drawing part using user input
        button1 = new JButton("Launch");
		button1.addActionListener(clk);
		
		button1.addActionListener(new ActionListener() {
					@Override
					public void actionPerformed(ActionEvent e) {
						colorTraj = trajectoryBox.getSelectedItem().toString();
						
						if(e.getSource() == button1) {
							
							//inner class
							class motionExp extends JPanel{
								/**
								 * 
								 */
								private static final long serialVersionUID = 1L;

								//paintComponent method to draw the fire works
								@Override
								protected void paintComponent(Graphics g) {
									
									super.paintComponent(g);
									this.setBackground(Color.LIGHT_GRAY);
									int x, y, Y;
									getWidth();
									Y = getHeight();
									

									final double G = 9.81;
									Math.sin(Math.toRadians(initAngle));
									
									if(colorTraj.equalsIgnoreCase("red")) {
										g.setColor(Color.RED);
									}
									else if(colorTraj.equalsIgnoreCase("yellow")) {
										g.setColor(Color.YELLOW);
									}
									else if(colorTraj.equalsIgnoreCase("green")) {
										g.setColor(Color.GREEN);
									}
									else if(colorTraj.equalsIgnoreCase("gray")) {
										g.setColor(Color.GRAY);
									}
									else if(colorTraj.equalsIgnoreCase("pink")) {
										g.setColor(Color.PINK);
									}
									
									for (int time = 0; time <= timeDelay; time++ ) {
										x = (int)(initVelo * Math.cos(Math.toRadians(initAngle)) * time);
										y = (int)(initVelo * Math.sin(Math.toRadians(initAngle)) * time - G * time * time / 2);

										g.fillOval(100+x,(Y-100)-y, 10, 10);
										
										if(time == timeDelay) {
											if(levelExplo == 1) {
											g.setColor(Color.MAGENTA);
											g.fillOval(100+x-180,(Y-100)-y-180, 360, 360);
											for(int i = 0; i<=360; i += 15) {
												g.setColor(Color.blue);
												g.drawLine((100+x), ((Y-100)-y),(int)(((100+x))+100*Math.cos(Math.toRadians(i))), 
														   (int)(((Y-100)-y)+100*Math.sin(Math.toRadians(i))));
												}
											}
											else if(levelExplo == 2) {
												g.setColor(Color.yellow);
												g.fillOval(100+x-25, (Y-100)-y-25, 50, 50);
												
												
												g.setColor(Color.RED);
												for(int i = 0; i <=360; i += 15) {
													g.drawLine((100+x), ((Y-100)-y),(int)(((100+x))+100*Math.cos(Math.toRadians(i))), 
															   (int)(((Y-100)-y)+100*Math.sin(Math.toRadians(i))));
													
												}
												
											}
											else if(levelExplo == 3) {
												g.setColor(Color.green);
												g.fillOval(100+x-25, (Y-180)-y-25, 50, 50);
												
												g.setColor(Color.RED);
												for(int i = 0; i <=360; i += 15) {
													g.drawLine((100+x), ((Y-180)-y),(int)(((100+x))+100*Math.cos(Math.toRadians(i))), 
															   (int)(((Y-180)-y)+100*Math.sin(Math.toRadians(i))));
													
												}
												
												g.setColor(Color.CYAN);
												g.fillOval(180+x-25, (Y-100)-y-25, 50, 50);
												
												g.setColor(Color.BLACK);
												for(int i = 0; i <=360; i += 15) {
													g.drawLine((180+x), ((Y-100)-y),(int)(((180+x))+100*Math.cos(Math.toRadians(i))), 
															   (int)(((Y-100)-y)+100*Math.sin(Math.toRadians(i))));
													
												}
												
												g.setColor(Color.yellow);
												g.fillOval(100+x-25, (Y-20)-y-25, 50, 50);
												
												g.setColor(Color.blue);
												for(int i = 0; i <=360; i += 15) {
													g.drawLine((100+x), ((Y-20)-y),(int)(((100+x))+100*Math.cos(Math.toRadians(i))), 
															   (int)(((Y-20)-y)+100*Math.sin(Math.toRadians(i))));
													
												}
											}
											else if(levelExplo == 4) {
												//circle
												g.setColor(Color.yellow);
												g.fillOval(100+x-125, (Y-20)-y-125, 250, 250);
												
												g.setColor(Color.pink);
												g.fillOval(100+x-100, (Y-20)-y-100, 200, 200);
												
												g.setColor(Color.gray);
												g.fillOval(100+x-75, (Y-20)-y-75, 150, 150);
												
												g.setColor(Color.CYAN);
												g.fillOval(100+x-50, (Y-20)-y-50, 100, 100);
												
												g.setColor(Color.RED);
												g.fillOval(100+x-10, (Y-20)-y-10, 20, 20);
												
												//inner loop lines
												g.setColor(Color.MAGENTA);
												for(int i = 0; i <=360; i += 5) {
													g.drawLine((int)(100+x+20*Math.cos(Math.toRadians(i))), 
															(int)((Y-20)-y+20*Math.sin(Math.toRadians(i))),
															(int)(100+x+80*Math.cos(Math.toRadians(i))), 
															(int)((Y-20)-y+80*Math.sin(Math.toRadians(i))));
												}
												
												//outer loop lines
												g.setColor(Color.BLUE);
												for(int i = 0; i <=360; i += 12) {
												g.drawLine((int)(100+x+90*Math.cos(Math.toRadians(i))), 
														(int)((Y-20)-y+90*Math.sin(Math.toRadians(i))),
														(int)(100+x+150*Math.cos(Math.toRadians(i))), 
														(int)((Y-20)-y+150*Math.sin(Math.toRadians(i))));
												
												}
											}
											
											else if(levelExplo == 5) {
												g.setColor(Color.green);
												g.fillOval((int)(120+100+x)-10, (int)(120+(Y-20)-y)-10, 20, 20);
												
												g.setColor(Color.yellow);
												for(int i = 0; i <=150; i += 5) {
												g.drawOval((int)(120+100+x)-50-i, (int)(120+(Y-20)-y)-50-i, 100+2*i, 100+2*i);
												}
												
												//inner loop lines
												g.setColor(Color.red);
												for(int i = 0; i <=360; i += 5) {
													g.drawLine((int)(120+100+x+10*Math.cos(Math.toRadians(i))), 
															(int)(120+(Y-20)-y+10*Math.sin(Math.toRadians(i))),
															(int)(120+100+x+60*Math.cos(Math.toRadians(i))), 
															(int)(120+(Y-20)-y+60*Math.sin(Math.toRadians(i))));
													}
												//outer loop lines
												g.setColor(Color.ORANGE);
												for(int i = 0; i <=360; i += 12) {
												g.drawLine((int)(120+100+x+75*Math.cos(Math.toRadians(i))), 
														(int)(120+(Y-20)-y+75*Math.sin(Math.toRadians(i))),
														(int)(120+100+x+140*Math.cos(Math.toRadians(i))), 
														(int)(120+(Y-20)-y+140*Math.sin(Math.toRadians(i))));
												
												}
												
												
												//2nd structure
												g.setColor(Color.blue);
												g.fillOval((int)(-120+100+x)-10, (int)(-120+(Y-20)-y)-10, 20, 20);
												
												g.setColor(Color.magenta);
												for(int i = 0; i <=150; i += 5) {
												g.drawOval((int)(-120+100+x)-50-i, (int)(-120+(Y-20)-y)-50-i, 100+2*i, 100+2*i);
												}
												
												//inner loop lines
												g.setColor(Color.pink);
												for(int i = 0; i <=360; i += 5) {
													g.drawLine((int)(-120+100+x+10*Math.cos(Math.toRadians(i))), 
															(int)(-120+(Y-20)-y+10*Math.sin(Math.toRadians(i))),
															(int)(-120+100+x+60*Math.cos(Math.toRadians(i))), 
															(int)(-120+(Y-20)-y+60*Math.sin(Math.toRadians(i))));
													}
												//outer loop lines
												g.setColor(Color.gray);
												for(int i = 0; i <=360; i += 12) {
												g.drawLine((int)(-120+100+x+75*Math.cos(Math.toRadians(i))), 
														(int)(-120+(Y-20)-y+75*Math.sin(Math.toRadians(i))),
														(int)(-120+100+x+140*Math.cos(Math.toRadians(i))), 
														(int)(-120+(Y-20)-y+140*Math.sin(Math.toRadians(i))));
												
												}
												
												
												//3rd structure
												g.setColor(Color.gray);
												g.fillOval((int)(150+100+x)-10, (int)(-150+(Y-20)-y)-10, 20, 20);
												
												g.setColor(Color.cyan);
												for(int i = 0; i <=150; i += 5) {
												g.drawOval((int)(150+100+x)-50-i, (int)(-150+(Y-20)-y)-50-i, 100+2*i, 100+2*i);
												}
												
												//inner loop lines
												g.setColor(Color.blue);
												for(int i = 0; i <=360; i += 5) {
													g.drawLine((int)(150+100+x+10*Math.cos(Math.toRadians(i))), 
															(int)(-150+(Y-20)-y+10*Math.sin(Math.toRadians(i))),
															(int)(150+100+x+60*Math.cos(Math.toRadians(i))), 
															(int)(-150+(Y-20)-y+60*Math.sin(Math.toRadians(i))));
													}
												//outer loop lines
												g.setColor(Color.ORANGE);
												for(int i = 0; i <=360; i += 12) {
												g.drawLine((int)(150+100+x+75*Math.cos(Math.toRadians(i))), 
														(int)(-150+(Y-20)-y+75*Math.sin(Math.toRadians(i))),
														(int)(150+100+x+140*Math.cos(Math.toRadians(i))), 
														(int)(-150+(Y-20)-y+140*Math.sin(Math.toRadians(i))));
												
												}
												
											}
										}
									
									}
								
								}
								
							}
							
							//This piece of code is used to create an instance of my inner class, and use that
							//instance to access its paintComponent(getGraphics()).
							//Once, it's accessed, I added it to the center of my frame.
							motionExp ooo = new motionExp();
							ooo.paintComponent(getGraphics());
							getContentPane().add(BorderLayout.CENTER, ooo);
							
						}
						
					}
					
				});
		c.gridx = 10;
		c.gridy = 1;
		c.insets = new Insets(0, 0, 0, 0);
		panel1.add(button1, c); //this is where my launch button is added
	}
		
	//a main method to run my program.
	public static void main(String[] args) {
		FrontEnd projectCS = new FrontEnd();
		projectCS.pack();
		projectCS.setVisible(true);
		projectCS.setResizable(true);

	}

}
